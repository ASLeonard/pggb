#!/usr/bin/env bash

# exit when any command fails
set -eo pipefail

input_fasta=false
output_dir=""
resume=false
map_pct_id=false
align_pct_id=false
n_secondary=false
segment_length=false
mash_kmer=16
min_match_length=8
transclose_batch=1000000
max_block_weight=10000
block_id_min=0
max_path_jump=5000
min_subpath=0
max_edge_jump=5000
max_poa_length=10000
do_viz=false
do_layout=false
threads=1
mapper=edyeet
wf_min=100
wf_diff=500
merge_segments=false
do_stats=false
exclude_delim=false
consensus_jump_max=10,100,1000,10000
no_splits=false
multiqc=false

if [ $# -eq 0 ];
then
    show_help=true
fi

# read the options
cmd=$0" "$@
TEMP=`getopt -o i:o:p:a:n:s:K:k:B:w:j:P:e:t:vlhWD:L:MSY:G:C:I:Nr:m --long input-fasta:,output-dir:,map-pct-id:,align-pct-id:,n-secondary:,segment-length:,mash-kmer:,min-match-length:,transclose-batch:,block-weight-max:,path-jump-max:,subpath-min:,edge-jump-max:,threads:,do-viz,do-layout,help,wfmash,wf-dist:,wf-min:,merge-segments,do-stats,exclude-delim:,poa-length-max:,consensus-jump-max:,block-id-min:,no-splits,resume,multiqc -n 'pggb' -- "$@"`
eval set -- "$TEMP"

# extract options and their arguments into variables.
while true ; do
    case "$1" in
        -i|--input-fasta) input_fasta=$2 ; shift 2 ;;
        -o|--output-dir) output_dir=$2 ; shift 2 ;;
        -p|--map-pct-id) map_pct_id=$2 ; shift 2 ;;
        -a|--align-pct-id) align_pct_id=$2 ; shift 2 ;;
        -n|--n-secondary) n_secondary=$2 ; shift 2 ;;
        -s|--segment-length) segment_length=$2 ; shift 2 ;;
        -M|--merge-segments) merge_segments=true ; shift ;;
        -N|--no-splits) no_splits=true ; shift ;;
        -K|--mash-kmer) mash_kmer=$2 ; shift 2 ;;
        -W|--wfmash) mapper=wfmash ; shift ;;
        -D|--wf-dist) wf_diff=$2 ; shift 2 ;;
        -L|--wf-min) wf_min=$2 ; shift 2 ;;
        -Y|--exclude-delim) exclude_delim=$2 ; shift 2 ;;
        -k|--min-match-length) min_match_length=$2 ; shift 2 ;;
        -B|--transclose-batch) transclose_batch=$2 ; shift 2 ;;
        -w|--block-weight-max) max_block_weight=$2 ; shift 2 ;;
        -I|--block-id-min) block_id_min=$2 ; shift 2 ;;
        -j|--path-jump-max) max_path_jump=$2 ; shift 2 ;;
        -P|--subpath-min) min_subpath=$2 ; shift 2 ;;
        -e|--edge-jump-max) max_edge_jump=$2 ; shift 2 ;;
        -G|--poa-length-max) max_poa_length=$2 ; shift 2 ;;
        -C|--consensus-jump-max) consensus_jump_max=$2 ; shift 2 ;;
        -t|--threads) threads=$2 ; shift 2 ;;
        -v|--do-viz) do_viz=true ; shift ;;
        -l|--do-layout) do_layout=true ; shift ;;
        -S|--do-stats) do_stats=true ; shift ;;
        -m|--multiqc) multiqc=true ; shift ;;
        -r|--resume) resume=true ; shift ;;
        -h|--help) show_help=true ; shift ;;
        #-d|--debug) debug=true ; shift ;;
        --) shift ; break ;;
        *) echo $2 "Internal error!" ; exit 1 ;;
    esac
done

if [[
       $input_fasta == false
    || $map_pct_id == false
    || $align_pct_id == false
    || $n_secondary == false
    || $segment_length == false
   ]];
then
    show_help=true
    >&2 echo "Mandatory arguments -i, -s, -n, -p, -a"
fi

if [ $show_help ];
then
    padding=`printf %${#0}s` # prints as many spaces as the length of $0
    echo "usage: $0 -i <input-fasta> -s <segment-length> -n <n-secondary>"
    echo "       $padding -p <map-pct-id> -a <align-pct-id> [options]"
    echo "options:"
    echo "   [alignment]"
    echo "    -i, --input-fasta FILE      input FASTA/FASTQ file"
    echo "    -s, --segment-length N      segment length for mapping"
    echo "    -N, --no-split              disable splitting of input sequences during mapping [enabled by default]"
    echo "    -M, --merge-segments        attempt to merge successive segments to make longer mappings"
    echo "    -p, --map-pct-id PCT        percent identity in the edyeet mashmap step"
    echo "    -a, --align-pct-id PCT      percent identity in the edyeet edlib alignment step"
    echo "    -n, --n-secondary N         number of secondary mappings to retain in 'map' filter mode"
    echo "    -K, --mash-kmer N           kmer size for mashmap [default: 16]"
    echo "    -W, --wfmash                use wfmash [default: edyeet]"
    echo "    -L, --wf-min N              reduce wavefronts when we have at least this many [default: 100]"
    echo "    -D, --wf-dist N             prune wavefronts more than N cells behind the max wavefront [default: 50]"
    echo "    -Y, --exclude-delim C       skip mappings between sequences with the same name prefix before"
    echo "                                the given delimiter character [default: all-vs-all and !self]"
    echo "   [seqwish]"
    echo "    -k, --min-match-len N       ignore exact matches below this length [default: 8]"
    echo "    -B, --transclose-batch      number of bp to use for transitive closure batch [default: 1000000]"
    echo "   [smoothxg]"
    echo "    -w, --block-weight-max N    maximum seed sequence in block [default: 10000]"
    echo "    -I, --block-id-min N        split blocks into groups connected by this identity threshold [default: 0 / OFF]"
    echo "    -j, --path-jump-max         maximum path jump to include in block [default: 5000]"
    echo "    -e, --edge-jump-max N       maximum edge jump before breaking [default: 5000]"
    echo "    -G, --poa-length-max N      maximum sequence length to put into POA [default: 10000]"
    echo "    -C, --consensus-jump-max N  preserve all divergences from the consensus paths greater"
    echo "                                than this length [default: 10,100,1000,10000]"
    echo "   [odgi]"
    echo "    -v, --viz                   render a visualization of the graph in 1D"
    echo "    -l, --layout                render a 2D layout of the graph"
    echo "    -S, --stats                 generate statistics of the seqwish and smoothxg graph [default: OFF]"
    echo "   [multiqc]"
    echo "    -m, --multiqc                   generate MultiQC report of graphs' statistics and visualizations, automatically runs odgi stats [default: OFF]"
    echo "   [general]"
    echo "    -o, --output-dir PATH       output directory"
    echo "    -r, --resume                do not overwrite existing output from edyeet, seqwish, smoothxg"
    echo "                                [default: start pipeline from scratch]"
    echo "    -t, --threads N             number of compute threads to use in parallel steps"
    echo "    -h, --help                  this text"
    echo
    echo "Use edyeet, seqwish, smoothxg, and odgi to build and display a pangenome graph."
    exit
fi

# todo name according to the things we set
f=$input_fasta.pggb-s$segment_length-p$map_pct_id-n$n_secondary-a$align_pct_id-K$mash_kmer-k$min_match_length-w$max_block_weight-j$max_path_jump-e$max_edge_jump-I$block_id_min
date=`date "+%m-%d-%Y_%H:%M:%S"`
log_file=$f.$date.log
param_file=$f.$date.params.yml

fmt="%C\n%Us user %Ss system %P cpu %es total %MKb max memory"
timer=/usr/bin/time

if [[ $output_dir != "" ]]; then
	if [ ! -e $output_dir ]; then
		mkdir $output_dir
	fi
	f=$output_dir/$(basename "$f")
    log_file=$f.$date.log
    param_file=$f.$date.params.yml
fi

# write parameters to log_file:
echo -e "Starting pggb on `date`\n" > $log_file
echo -e "Command: $cmd\n" >> $log_file
echo -e "PARAMETERS\n" >> $log_file
if [[ $wfmash == "wfmash" ]]; then
     wfmash_bool=true
else wfmash_bool=false
fi
cat <<EOT | tee -a $log_file $param_file >/dev/null
general:
  input-fasta:        $input_fasta
  output-dir:         $output_dir
  resume:             $resume
  threads:            $threads
alignment:
  mapping-tool:       $mapper
  no-splits:          $no_splits
  segment-length:     $segment_length
  merge-segments:     $merge_segments
  map-pct-id:         $map_pct_id
  align-pct-id:       $align_pct_id
  n-secondary:        $n_secondary
  mash-kmer:          $mash_kmer
  wfmash:             $wfmash_bool
  wf-min:             $wf_min
  wf-dist:            $wf_diff
  exclude-delim:      $exclude_delim
seqwish:
  min-match-len:      $min_match_length
  transclose-batch:   $transclose_batch
smoothxg:
  block-weight-max:   $max_block_weight
  path-jump-max:      $max_path_jump
  edge-jump-max:      $max_edge_jump
  poa-length-max:     $max_poa_length
  consensus-jump-max: $consensus_jump_max
  block-id-min:       $block_id_min
odgi:
  viz:                $do_viz
  layout:             $do_layout
  stats:              $do_stats
reporting:
  multiqc:            $multiqc
EOT
echo -e "\nRunning pggb\n" >> $log_file

if [[ $multiqc == true ]];
then
    do_stats=true
fi


if [[ $merge_segments == true ]];
then
    merge_cmd=-M
    f=$f"-M"
fi

if [[ $no_splits == true ]];
then
    split_cmd=-N
    f=$f"-N"
fi

if [[ $exclude_delim != false ]];
then
    exclude_cmd="-Y "$exclude_delim
else
    exclude_cmd=-X
fi


if [[ "$mapper" == "edyeet" ]];
then
	if [[ ! -s $f.paf || $resume == false ]]; then
        ($timer -f "$fmt" edyeet \
            $exclude_cmd \
            -s $segment_length \
            $merge_cmd \
            $split_cmd \
            -p $map_pct_id \
            -n $n_secondary \
            -a $align_pct_id \
            -k $mash_kmer \
            -t $threads \
            $input_fasta $input_fasta \
            >$f.paf) 2> >(tee -a $log_file)
    fi
elif [[ "$mapper" == "wfmash" ]];
then
    f=$f"-W-L"$wf_min"-D"$wf_diff
    if [[ ! -s $f.paf || $resume == false ]]; then
        ($timer -f "$fmt" wfmash \
            $exclude_cmd \
            -s $segment_length \
            $merge_cmd \
            $split_cmd \
            -p $map_pct_id \
            -n $n_secondary \
            -a $align_pct_id \
            -k $mash_kmer \
            -l $wf_min \
            -d $wf_diff \
            -t $threads \
            $input_fasta $input_fasta \
            >$f.paf) 2> >(tee -a $log_file)
    fi
fi

if [[ ! -s $f.seqwish.gfa || $resume == false ]]; then
    $timer -f "$fmt" seqwish \
        -t $threads \
        -s $input_fasta \
        -p $f.paf \
        -k $min_match_length \
        -g $f.seqwish.gfa \
        -B $transclose_batch \
        -P \
        2> >(tee -a $log_file)
fi

if [[ ! -s $f.smooth.gfa || $resume == false ]]; then
    $timer -f "$fmt" smoothxg \
        -t $threads \
        -g $f.seqwish.gfa \
        -w $max_block_weight \
        -I $block_id_min \
        -j $max_path_jump \
        -e $max_edge_jump \
        -l $max_poa_length \
        -m $f.smooth.maf \
        -s $f.consensus \
        -a \
        -C $consensus_jump_max \
        -o $f.smooth.gfa \
        2> >(tee -a $log_file)
fi

$timer -f "$fmt" odgi build -g $f.smooth.gfa -o $f.smooth.og 2> >(tee -a $log_file)

if [[ $do_stats == true ]];
then
    $timer -f "$fmt" odgi build -g $f.seqwish.gfa -o $f.seqwish.og 2> >(tee -a $log_file)
    odgi stats -i $f.seqwish.og -S -s -l -d > $f.seqwish.og.stats 2>&1 | tee -a $log_file
    odgi stats -i $f.smooth.og -S -s -l -d > $f.smooth.og.stats 2>&1 | tee -a $log_file
    for consensus_graph in $f*.consensus*.gfa; do
        odgi build -g "$consensus_graph" -o "$consensus_graph".og 2> >(tee -a $log_file)
        odgi stats -i "$consensus_graph".og -S -s -l -d >"$consensus_graph".og.stats 2>&1 | tee -a $log_file
    done

fi

if [[ $do_viz == true ]];
then
    # big problem: this assumes that there is no "Consensus_" in the input sequences
    odgi paths -i $f.smooth.og -L | grep -v Consensus_ >$f.smooth.original_paths.txt \
        2> >(tee -a $log_file)
    $timer -f "$fmt" odgi viz -i $f.smooth.og \
                    -o $f.smooth.og.viz_mqc.png \
                    -x 1500 -y 500 -P 10 -p $f.smooth.original_paths.txt \
                    2> >(tee -a $log_file)
    rm -f $f.smooth.original_paths.txt 2> >(tee -a $log_file)
fi

if [[ $do_layout == true ]];
then
    # the 2D layout is "smoother" when we chop the nodes of the graph to a fixed maximum length
    $timer -f "$fmt" odgi chop -i $f.smooth.og -c 100 -o $f.smooth.chop.og \
        2> >(tee -a $log_file)

    # adding -N to this call can help when rendering large, complex graphs that aren't globally linear
    $timer -f "$fmt" odgi layout -i $f.smooth.chop.og \
                       -o $f.smooth.chop.og.lay \
                       -t $threads -P \
                       2> >(tee -a $log_file)

    # this can be configured to draw the graph in different ways, based on the same layout
    $timer -f "$fmt" odgi draw -i $f.smooth.chop.og \
                     -c $f.smooth.chop.og.lay \
                     -p $f.smooth.chop.og.lay.draw_mqc.png \
                     -C -w 20 \
                     -H 1500 -t $threads \
                     2> >(tee -a $log_file)
fi

multiqc_out_dir=$(dirname "$input_fasta")

if [[ $multiqc == true ]];
then 
    if [[ $output_dir == "" ]];
    then
        $timer -f "$fmt" multiqc $multiqc_out_dir \
        -s \
        -o $multiqc_out_dir \
        2> >(tee -a $log_file)
    else 
        $timer -f "$fmt" multiqc $output_dir \
        -s \
        -o $output_dir \
        2> >(tee -a $log_file)
    fi
fi
