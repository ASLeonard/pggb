#!/usr/bin/env bash

# exit when any command fails
set -eo pipefail

input_fasta=false
output_dir=""
resume=false
map_pct_id=false
align_pct_id=0
n_secondary=false
segment_length=false
block_length=false
mash_kmer=16
min_match_length=19
transclose_batch=1000000
max_block_weight=10000
block_id_min=0
ratio_contain=0
max_path_jump=5000
max_edge_jump=5000
max_poa_length=10000
do_viz=false
do_layout=false
threads=1
mapper=edyeet
wf_min=100
wf_diff=500
no_merge_segments=false
do_stats=false
exclude_delim=false
consensus_jump_max=10,100,1000,10000
no_splits=false
multiqc=false

if [ $# -eq 0 ];
then
    show_help=true
fi

# read the options
cmd=$0" "$@
TEMP=`getopt -o i:o:p:a:n:s:l:K:k:B:w:j:P:e:t:vLhWMSY:G:C:I:R:Nr:m --long input-fasta:,output-dir:,map-pct-id:,align-pct-id:,n-secondary:,segment-length:,block-length-min:,mash-kmer:,min-match-length:,transclose-batch:,block-weight-max:,path-jump-max:,subpath-min:,edge-jump-max:,threads:,do-viz,do-layout,help,wfmash,no-merge-segments,do-stats,exclude-delim:,poa-length-max:,consensus-jump-max:,block-id-min:,ratio-contain:,no-splits,resume,multiqc -n 'pggb' -- "$@"`
eval set -- "$TEMP"

# extract options and their arguments into variables.
while true ; do
    case "$1" in
        -i|--input-fasta) input_fasta=$2 ; shift 2 ;;
        -o|--output-dir) output_dir=$2 ; shift 2 ;;
        -p|--map-pct-id) map_pct_id=$2 ; shift 2 ;;
        -a|--align-pct-id) align_pct_id=$2 ; shift 2 ;;
        -n|--n-secondary) n_secondary=$2 ; shift 2 ;;
        -s|--segment-length) segment_length=$2 ; shift 2 ;;
        -l|--block-length) block_length=$2 ; shift 2 ;;
        -M|--no-merge-segments) no_merge_segments=true ; shift ;;
        -N|--no-splits) no_splits=true ; shift ;;
        -K|--mash-kmer) mash_kmer=$2 ; shift 2 ;;
        -W|--wfmash) mapper=wfmash ; shift ;;
        -Y|--exclude-delim) exclude_delim=$2 ; shift 2 ;;
        -k|--min-match-length) min_match_length=$2 ; shift 2 ;;
        -B|--transclose-batch) transclose_batch=$2 ; shift 2 ;;
        -w|--block-weight-max) max_block_weight=$2 ; shift 2 ;;
        -I|--block-id-min) block_id_min=$2 ; shift 2 ;;
        -R|--ratio-contain) ratio_contain=$2 ; shift 2 ;;
        -j|--path-jump-max) max_path_jump=$2 ; shift 2 ;;
        -e|--edge-jump-max) max_edge_jump=$2 ; shift 2 ;;
        -G|--poa-length-max) max_poa_length=$2 ; shift 2 ;;
        -C|--consensus-jump-max) consensus_jump_max=$2 ; shift 2 ;;
        -t|--threads) threads=$2 ; shift 2 ;;
        -v|--do-viz) do_viz=true ; shift ;;
        -L|--do-layout) do_layout=true ; shift ;;
        -S|--do-stats) do_stats=true ; shift ;;
        -m|--multiqc) multiqc=true ; shift ;;
        -r|--resume) resume=true ; shift ;;
        -h|--help) show_help=true ; shift ;;
        #-d|--debug) debug=true ; shift ;;
        --) shift ; break ;;
        *) echo "$2" "Internal error!" ; exit 1 ;;
    esac
done

if [[
       "$input_fasta" == false
    || $map_pct_id == false
    || $n_secondary == false
    || $segment_length == false
   ]];
then
    show_help=true
    >&2 echo "Mandatory arguments -i, -s, -n, -p, -a"
fi

if [[ $block_length == false ]];
then
    block_length=$(echo $segment_length '*' 3 | bc)
fi

if [ $show_help ];
then
    padding=`printf %${#0}s` # prints as many spaces as the length of $0
    echo "usage: $0 -i <input-fasta> -s <segment-length> -n <n-secondary>"
    echo "       $padding -p <map-pct-id> -a <align-pct-id> [options]"
    echo "options:"
    echo "   [alignment]"
    echo "    -i, --input-fasta FILE      input FASTA/FASTQ file"
    echo "    -s, --segment-length N      segment length for mapping"
    echo "    -l, --block-length N        minimum block length filter for mapping [default: 3*segment-length]"
    echo "    -N, --no-split              disable splitting of input sequences during mapping [enabled by default]"
    echo "    -M, --no-merge-segments     do not merge successive mappings"
    echo "    -p, --map-pct-id PCT        percent identity in the wfmash or edyeet mashmap step"
    echo "    -a, --align-pct-id PCT      percent identity in the edyeet edlib alignment step [default: 0]"
    echo "    -n, --n-secondary N         number of secondary mappings to retain in 'map' filter mode"
    echo "    -K, --mash-kmer N           kmer size for mashmap [default: 16]"
    echo "    -W, --wfmash                use the wfmash edit-distance mashmapper [default: edyeet]"
    echo "    -Y, --exclude-delim C       skip mappings between sequences with the same name prefix before"
    echo "                                the given delimiter character [default: all-vs-all and !self]"
    echo "   [seqwish]"
    echo "    -k, --min-match-len N       ignore exact matches below this length [default: 19]"
    echo "    -B, --transclose-batch      number of bp to use for transitive closure batch [default: 1000000]"
    echo "   [smoothxg]"
    echo "    -w, --block-weight-max N    maximum seed sequence in block [default: 10000]"
    echo "    -I, --block-id-min N        split blocks into groups connected by this identity threshold [default: 0 / OFF]"
    echo "    -R, --ratio-contain N       minimum short length / long length ratio to compare sequences for the containment"
    echo "                                metric in the clustering [default: 0, no containment metric]"
    echo "    -j, --path-jump-max         maximum path jump to include in block [default: 5000]"
    echo "    -e, --edge-jump-max N       maximum edge jump before breaking [default: 5000]"
    echo "    -G, --poa-length-max N      maximum sequence length to put into POA [default: 10000]"
    echo "    -C, --consensus-jump-max N  preserve all divergences from the consensus paths greater"
    echo "                                than this length [default: 10,100,1000,10000]"
    echo "   [odgi]"
    echo "    -v, --viz                   render a visualization of the graph in 1D"
    echo "    -L, --layout                render a 2D layout of the graph"
    echo "    -S, --stats                 generate statistics of the seqwish and smoothxg graph [default: OFF]"
    echo "   [multiqc]"
    echo "    -m, --multiqc               generate MultiQC report of graphs' statistics and visualizations,"
    echo "                                automatically runs odgi stats [default: OFF]"
    echo "   [general]"
    echo "    -o, --output-dir PATH       output directory"
    echo "    -r, --resume                do not overwrite existing output from edyeet, seqwish, smoothxg"
    echo "                                [default: start pipeline from scratch]"
    echo "    -t, --threads N             number of compute threads to use in parallel steps"
    echo "    -h, --help                  this text"
    echo
    echo "Use edyeet, seqwish, smoothxg, and odgi to build and display a pangenome graph."
    exit
fi

# Alignment
mapper_letter='E'
if [[ "$mapper" == "wfmash" ]];
then
  mapper_letter='W'
fi

prefix_paf="$input_fasta".pggb-$mapper_letter-s$segment_length-p$map_pct_id-n$n_secondary-a$align_pct_id-K$mash_kmer

if [[ $no_merge_segments == true ]];
then
    merge_cmd=-M
    prefix_paf="$prefix_paf"-M
fi

if [[ $no_splits == true ]];
then
    split_cmd=-N
    prefix_paf="$prefix_paf"-N
fi

if [[ $exclude_delim != false ]];
then
    exclude_cmd="-Y "$exclude_delim
else
    exclude_cmd=-X
fi

if [[ $mapper == "edyeet" ]];
then
    prefix_paf="$prefix_paf"
elif [[ $mapper == "wfmash" ]];
then
    prefix_paf="$prefix_paf"-L$wf_min-D$wf_diff
fi

# Graph induction
prefix_seqwish="$prefix_paf"-k$min_match_length.seqwish

# Normalization
prefix_smoothed="$prefix_seqwish"-w$max_block_weight-j$max_path_jump-e$max_edge_jump-I$block_id_min.smooth


fmt="%C\n%Us user %Ss system %P cpu %es total %MKb max memory"
timer=/usr/bin/time

if [[ "$output_dir" != "" ]]; then
	if [ ! -e "$output_dir" ]; then
		mkdir "$output_dir"
	fi
	prefix_paf="$output_dir"/$(basename "$prefix_paf")
	prefix_seqwish="$output_dir"/$(basename "$prefix_seqwish")
	prefix_smoothed="$output_dir"/$(basename "$prefix_smoothed")
fi

date=`date "+%m-%d-%Y_%H:%M:%S"`
log_file="$prefix_smoothed".$date.log
param_file="$prefix_smoothed".$date.params.yml

# write parameters to log_file:
echo -e "Starting pggb on `date`\n" > "$log_file"
echo -e "Command: $cmd\n" >> "$log_file"
echo -e "PARAMETERS\n" >> "$log_file"
if [[ $mapper == "wfmash" ]]; then
     wfmash_bool=true
else wfmash_bool=false
fi
cat <<EOT | tee -a "$log_file" "$param_file" >/dev/null
general:
  input-fasta:        $input_fasta
  output-dir:         $output_dir
  resume:             $resume
  threads:            $threads
alignment:
  mapping-tool:       $mapper
  no-splits:          $no_splits
  segment-length:     $segment_length
  block-length:       $block_length
  no-merge-segments:  $no_merge_segments
  map-pct-id:         $map_pct_id
  align-pct-id:       $align_pct_id
  n-secondary:        $n_secondary
  mash-kmer:          $mash_kmer
  wfmash:             $wfmash_bool
  exclude-delim:      $exclude_delim
seqwish:
  min-match-len:      $min_match_length
  transclose-batch:   $transclose_batch
smoothxg:
  block-weight-max:   $max_block_weight
  path-jump-max:      $max_path_jump
  edge-jump-max:      $max_edge_jump
  poa-length-max:     $max_poa_length
  consensus-jump-max: $consensus_jump_max
  block-id-min:       $block_id_min
  ratio-contain:      $ratio_contain
odgi:
  viz:                $do_viz
  layout:             $do_layout
  stats:              $do_stats
reporting:
  multiqc:            $multiqc
EOT

echo -e "\nRunning pggb\n" >> "$log_file"
if [[ ! -s "$prefix_paf".paf || $resume == false ]]; then
  if [[ "$mapper" == "edyeet" ]];
  then
          ($timer -f "$fmt" edyeet \
              $exclude_cmd \
              -s $segment_length \
              -l $block_length \
              $merge_cmd \
              $split_cmd \
              -p $map_pct_id \
              -n $n_secondary \
              -a $align_pct_id \
              -k $mash_kmer \
              -t $threads \
              "$input_fasta" "$input_fasta" \
              > "$prefix_paf".paf) 2> >(tee -a "$log_file")
  elif [[ "$mapper" == "wfmash" ]];
  then
          ($timer -f "$fmt" wfmash \
              $exclude_cmd \
              -s $segment_length \
              -l $block_length \
              $merge_cmd \
              $split_cmd \
              -p $map_pct_id \
              -n $n_secondary \
              -k $mash_kmer \
              -l $wf_min \
              -t $threads \
              "$input_fasta" "$input_fasta" \
              > "$prefix_paf".paf) 2> >(tee -a "$log_file")
  fi
fi

if [[ ! -s $prefix_seqwish.gfa || $resume == false ]]; then
    $timer -f "$fmt" seqwish \
        -t $threads \
        -s "$input_fasta" \
        -p "$prefix_paf".paf \
        -k $min_match_length \
        -g "$prefix_seqwish".gfa \
        -B $transclose_batch \
        -P \
        2> >(tee -a "$log_file")
fi

if [[ ! -s $prefix_smoothed.gfa || $resume == false ]]; then
    $timer -f "$fmt" smoothxg \
        -t $threads \
        -g "$prefix_seqwish".gfa \
        -w $max_block_weight \
        -M \
        -J 0.7 \
        -K \
        -I $block_id_min \
        -R $ratio_contain \
        -j $max_path_jump \
        -e $max_edge_jump \
        -l $max_poa_length \
        -m "$prefix_smoothed".maf \
        -s "$prefix_smoothed".consensus \
        -a \
        -C $consensus_jump_max \
        -o "$prefix_smoothed".gfa \
        2> >(tee -a "$log_file")
fi

$timer -f "$fmt" odgi build -t $threads -p -g "$prefix_smoothed".gfa -o "$prefix_smoothed".og 2> >(tee -a "$log_file")

if [[ $multiqc == true ]];
then
    do_stats=true
fi

if [[ $do_stats == true ]];
then
    $timer -f "$fmt" odgi build -t $threads -p -g "$prefix_seqwish".gfa -o "$prefix_seqwish".og 2> >(tee -a "$log_file")
    odgi stats -i "$prefix_seqwish".og -S -s -l -d > "$prefix_seqwish".og.stats 2>&1 | tee -a "$log_file"
    odgi stats -i "$prefix_smoothed".og -S -s -l -d > "$prefix_smoothed".og.stats 2>&1 | tee -a "$log_file"
    for consensus_graph in "$prefix_smoothed"*.consensus*.gfa; do
        odgi build -t $threads -p -g "$consensus_graph" -o "$consensus_graph".og 2> >(tee -a "$log_file")
        odgi stats -i "$consensus_graph".og -S -s -l -d >"$consensus_graph".og.stats 2>&1 | tee -a "$log_file"
    done
fi

if [[ $do_viz == true ]];
then
    # big problem: this assumes that there is no "Consensus_" in the input sequences
    odgi paths -i "$prefix_smoothed".og -L | grep -v Consensus_ > "$prefix_smoothed".original_paths.txt \
        2> >(tee -a "$log_file")
    $timer -f "$fmt" odgi viz -i "$prefix_smoothed".og \
                    -o "$prefix_smoothed".og.viz_mqc.png \
                    -x 1500 -y 500 -P 10 -p "$prefix_smoothed".original_paths.txt \
                    2> >(tee -a "$log_file")
    rm -f "$prefix_smoothed".original_paths.txt 2> >(tee -a "$log_file")
fi

if [[ $do_layout == true ]];
then
    # the 2D layout is "smoother" when we chop the nodes of the graph to a fixed maximum length
    $timer -f "$fmt" odgi chop -i "$prefix_smoothed".og -c 100 -o "$prefix_smoothed".chop.og \
        2> >(tee -a "$log_file")

    # adding -N to this call can help when rendering large, complex graphs that aren't globally linear
    $timer -f "$fmt" odgi layout -i "$prefix_smoothed".chop.og \
                       -o "$prefix_smoothed".chop.og.lay \
                       -t $threads -P \
                       2> >(tee -a "$log_file")

    # this can be configured to draw the graph in different ways, based on the same layout
    $timer -f "$fmt" odgi draw -i "$prefix_smoothed".chop.og \
                     -c "$prefix_smoothed".chop.og.lay \
                     -p "$prefix_smoothed".chop.og.lay.draw_mqc.png \
                     -C -w 20 \
                     -H 1500 -t $threads \
                     2> >(tee -a "$log_file")
fi

multiqc_out_dir=$(dirname "$input_fasta")

if [[ $multiqc == true ]];
then
    if [[ $output_dir == "" ]];
    then
        $timer -f "$fmt" multiqc "$multiqc_out_dir" \
        -s \
        -o "$multiqc_out_dir" \
        2> >(tee -a "$log_file")
    else
        $timer -f "$fmt" multiqc "$output_dir" \
        -s \
        -o "$output_dir" \
        2> >(tee -a "$log_file")
    fi
fi
